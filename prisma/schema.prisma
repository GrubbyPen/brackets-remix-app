datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  emailVerified  DateTime?         @map("email_verified")
  image          String?
  password       Password?
  createdAt      DateTime          @default(now()) @map(name: "created_at")
  updatedAt      DateTime          @updatedAt @map(name: "updated_at")
  tournaments    TournamentUsers[]
  playersCreated Player[]          @relation(name: "creator")
  players        Player[]          @relation(name: "user")
  teamPlayers    TeamPlayers[]

  @@map("users")
}

model Tournament {
  id            String            @id @default(cuid())
  title         String
  description   String?
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  players       Player[]
  users         TournamentUsers[]
  teamSize      Int               @default(1) @map(name: "team_size")
  teams         Team[]            @relation(name: "teamTournaments")
  rounds        Round[]
  winner        Team?             @relation("tournamentWinner", fields: [winningTeamId], references: [id])
  winningTeamId String?           @map("winning_team_id")

  @@map("tournaments")
}

enum Role {
  SPECTATOR
  INVITEE
  PLAYER
  OWNER
}

model TournamentUsers {
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String     @map("tournament_id") // relation scalar field (used in the `@relation` attribute above)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @map("user_id") // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime   @default(now())
  role         Role       @default(SPECTATOR)

  @@id([tournamentId, userId])
  @@map("tournament_users")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map("passwords")
}

model Player {
  id              String        @id @default(cuid())
  name            String
  teams           TeamPlayers[]
  tournament      Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId    String        @map("tournament_id")
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  createdBy       User          @relation(name: "creator", fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String        @map(name: "created_by_user_id")
  user            User          @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  userId          String        @map(name: "user_id")

  @@map("players")
}

model Team {
  id             String        @id @default(cuid())
  name           String
  players        TeamPlayers[]
  tournament     Tournament    @relation(name: "teamTournaments", fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId   String        @map("tournament_id")
  matches        Match[]       @relation(name: "teamMatches")
  matchesWon     Match[]       @relation(name: "winningTeamMatches")
  tournamentsWon Tournament[]  @relation("tournamentWinner")

  @@map("teams")
}

model TeamPlayers {
  team             Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId           String   @map("team_id") // relation scalar field (used in the `@relation` attribute above)
  player           Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId         String   @map("player_id") // relation scalar field (used in the `@relation` attribute above) 
  assignedAt       DateTime @default(now()) @map("assigned_at")
  assignedBy       User     @relation(fields: [assignedByUserId], references: [id], onDelete: Cascade)
  assignedByUserId String   @map("assigned_by_user_id")

  @@id([playerId, teamId])
  @@map("team_players")
}

model Round {
  id           String     @id @default(cuid())
  name         String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String     @map("tournament_id")
  matches      Match[]

  @@map("rounds")
}

model Match {
  id            String  @id @default(cuid())
  round         Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId       String  @map("round_id")
  teams         Team[]  @relation(name: "teamMatches")
  winningTeamId String? @map("winning_team_id")
  winningTeam   Team?   @relation(name: "winningTeamMatches", fields: [winningTeamId], references: [id])

  @@map("matches")
}
